name: Analyze, Test & Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  analyze:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - uses: actions/checkout@v3
        with:
          path: project

      - uses: actions/checkout@v3
        with:
          repository: projeli/shared
          path: shared
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/project.json') }}
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner-${{ hashFiles('**/project.json') }}
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Build and analyze
        working-directory: project
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          ..\.sonar\scanner\dotnet-sonarscanner begin /k:"projeli_project" /o:"projeli" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="TestResults/*/coverage.opencover.xml" /d:sonar.sources=".,../shared"
          dotnet build
          dotnet test --collect:"XPlat Code Coverage"
          ..\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [ analyze ]

    steps:
    # Checkout the main project repository
    - uses: actions/checkout@v3
      with:
        path: project  # Check out into a specific directory

    # Checkout the shared repository
    - uses: actions/checkout@v3
      with:
        repository: projeli/shared
        path: shared   # Check out into a separate directory
        token: ${{ secrets.GITHUB_TOKEN }}  # Usually sufficient for same-org repos

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore project/ProjectService.sln  # Adjust path to your solution file

    - name: Build
      run: dotnet build project/ProjectService.sln --no-restore  # Adjust path

    - name: Test
      run: dotnet test project/ProjectService.sln --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults --settings project/runsettings.xml --logger "trx;LogFileName=test-results.trx"

    - name: Unit Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Unit Test Report
        path: "../TestResults/**/test-results.trx"
        reporter: dotnet-trx
        fail-on-error: true
        working-directory: project

    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: TestResults/**/coverage.cobertura.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'

    - name: Print Reports
      if: always()
      run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
  
  deploy:
    name: Deploy Docker Images
    runs-on: ubuntu-latest
    needs: [ test ]
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v3
        with:
          path: project

      - uses: actions/checkout@v3
        with:
          repository: projeli/shared
          path: shared

      - name: Log into Docker Hub
        uses: docker/login-action@v2
        with:
          username: daqem
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: project/Projeli.ProjectService.Api/Dockerfile
          push: true
          tags: daqem/projeli:project
